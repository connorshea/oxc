# Valgrind Performance Analysis
#
# Identifies performance bottlenecks using Valgrind tools:
# - Cachegrind: CPU cache behavior, branch predictions
# - Massif: Heap memory allocation patterns
# - Callgrind: Call graph profiling
#
# Focused on the core compilation pipeline: Parser → Semantic → Codegen
# Test file: TypeScript's checker.ts (~50k LOC real-world TypeScript)

name: Valgrind Performance Analysis

permissions:
  contents: read

on:
  push:
    branches:
      - valgrind

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  valgrind-parser:
    name: Valgrind - Parser
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-rust@1ff88fdaffd6ae35c0fb32ccc159340b37d0beac # v1.0.7
        with:
          cache-key: valgrind-parser
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Install Valgrind
        run: |
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          sudo apt-get update && sudo apt-get install -y valgrind

      - name: Build Parser Example
        run: cargo build --release -p oxc_parser --example parser

      - name: Download TypeScript checker.ts
        run: |
          mkdir -p test_inputs
          curl -fsSL https://raw.githubusercontent.com/microsoft/TypeScript/main/src/compiler/checker.ts \
            -o test_inputs/checker.ts
          echo "Downloaded checker.ts ($(wc -l < test_inputs/checker.ts) lines)"

      - name: Run Cachegrind (Cache Performance)
        run: |
          valgrind --tool=cachegrind \
            --cachegrind-out-file=parser_cachegrind.out \
            --branch-sim=yes \
            --cache-sim=yes \
            target/release/examples/parser test_inputs/checker.ts

      - name: Run Massif (Heap Profiling)
        run: |
          valgrind --tool=massif \
            --massif-out-file=parser_massif.out \
            --time-unit=B \
            target/release/examples/parser test_inputs/checker.ts

      - name: Run Callgrind (Call Graph)
        run: |
          valgrind --tool=callgrind \
            --callgrind-out-file=parser_callgrind.out \
            --dump-instr=yes \
            --collect-jumps=yes \
            target/release/examples/parser test_inputs/checker.ts

      - name: Analyze Results
        run: |
          echo "# Parser Performance Analysis" > parser_analysis.md
          echo "" >> parser_analysis.md
          echo "Test File: TypeScript checker.ts (~50k LOC)" >> parser_analysis.md
          echo "" >> parser_analysis.md

          # Extract key metrics
          echo "## Key Metrics Summary" >> parser_analysis.md
          echo '```' >> parser_analysis.md

          # Total instructions
          TOTAL_IR=$(cg_annotate parser_cachegrind.out | grep "PROGRAM TOTALS" | awk '{print $1}')
          echo "Total Instructions: $TOTAL_IR" >> parser_analysis.md

          # Cache statistics if available
          cg_annotate parser_cachegrind.out | grep -A 1 "PROGRAM TOTALS" | tail -1 >> parser_analysis.md || true

          # Peak memory
          PEAK_MB=$(ms_print parser_massif.out | grep "peak" | head -1 | awk '{print $NF}')
          echo "Peak Heap Memory: $PEAK_MB" >> parser_analysis.md

          # Top 3 hot functions
          echo "" >> parser_analysis.md
          echo "Top 3 Hot Functions:" >> parser_analysis.md
          callgrind_annotate parser_callgrind.out | grep "crates/oxc" | head -3 >> parser_analysis.md

          echo '```' >> parser_analysis.md
          echo "" >> parser_analysis.md

          echo "## Cache Performance (Cachegrind)" >> parser_analysis.md
          echo '```' >> parser_analysis.md
          cg_annotate parser_cachegrind.out 2>/dev/null | head -100 >> parser_analysis.md || true
          echo '```' >> parser_analysis.md
          echo "" >> parser_analysis.md

          echo "## Heap Profiling (Massif)" >> parser_analysis.md
          echo '```' >> parser_analysis.md
          ms_print parser_massif.out 2>/dev/null | head -100 >> parser_analysis.md || true
          echo '```' >> parser_analysis.md
          echo "" >> parser_analysis.md

          echo "## Call Graph (Top Functions)" >> parser_analysis.md
          echo '```' >> parser_analysis.md
          callgrind_annotate parser_callgrind.out 2>/dev/null | head -100 >> parser_analysis.md || true
          echo '```' >> parser_analysis.md

      - name: Upload Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: parser-valgrind-results
          path: |
            parser_cachegrind.out
            parser_massif.out
            parser_callgrind.out
            parser_analysis.md

  valgrind-semantic:
    name: Valgrind - Semantic Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-rust@1ff88fdaffd6ae35c0fb32ccc159340b37d0beac # v1.0.7
        with:
          cache-key: valgrind-semantic
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Install Valgrind
        run: |
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          sudo apt-get update && sudo apt-get install -y valgrind

      - name: Build Semantic Example
        run: cargo build --release -p oxc_semantic --example semantic

      - name: Download TypeScript checker.ts
        run: |
          mkdir -p test_inputs
          curl -fsSL https://raw.githubusercontent.com/microsoft/TypeScript/main/src/compiler/checker.ts \
            -o test_inputs/checker.ts
          echo "Downloaded checker.ts ($(wc -l < test_inputs/checker.ts) lines)"

      - name: Run Cachegrind
        run: |
          valgrind --tool=cachegrind \
            --cachegrind-out-file=semantic_cachegrind.out \
            --branch-sim=yes \
            --cache-sim=yes \
            target/release/examples/semantic test_inputs/checker.ts

      - name: Run Massif
        run: |
          valgrind --tool=massif \
            --massif-out-file=semantic_massif.out \
            --time-unit=B \
            target/release/examples/semantic test_inputs/checker.ts

      - name: Run Callgrind
        run: |
          valgrind --tool=callgrind \
            --callgrind-out-file=semantic_callgrind.out \
            --dump-instr=yes \
            --collect-jumps=yes \
            target/release/examples/semantic test_inputs/checker.ts

      - name: Analyze Results
        run: |
          echo "# Semantic Analysis Performance" > semantic_analysis.md
          echo "" >> semantic_analysis.md
          echo "Test File: TypeScript checker.ts (~50k LOC)" >> semantic_analysis.md
          echo "" >> semantic_analysis.md

          # Extract key metrics
          echo "## Key Metrics Summary" >> semantic_analysis.md
          echo '```' >> semantic_analysis.md

          # Total instructions
          TOTAL_IR=$(cg_annotate semantic_cachegrind.out | grep "PROGRAM TOTALS" | awk '{print $1}')
          echo "Total Instructions: $TOTAL_IR" >> semantic_analysis.md

          # Cache statistics if available
          cg_annotate semantic_cachegrind.out | grep -A 1 "PROGRAM TOTALS" | tail -1 >> semantic_analysis.md || true

          # Peak memory
          PEAK_MB=$(ms_print semantic_massif.out | grep "peak" | head -1 | awk '{print $NF}')
          echo "Peak Heap Memory: $PEAK_MB" >> semantic_analysis.md

          # Top 3 hot functions
          echo "" >> semantic_analysis.md
          echo "Top 3 Hot Functions:" >> semantic_analysis.md
          callgrind_annotate semantic_callgrind.out | grep "crates/oxc" | head -3 >> semantic_analysis.md

          echo '```' >> semantic_analysis.md
          echo "" >> semantic_analysis.md

          echo "## Cache Performance (Cachegrind)" >> semantic_analysis.md
          echo '```' >> semantic_analysis.md
          cg_annotate semantic_cachegrind.out 2>/dev/null | head -100 >> semantic_analysis.md || true
          echo '```' >> semantic_analysis.md
          echo "" >> semantic_analysis.md

          echo "## Heap Profiling (Massif)" >> semantic_analysis.md
          echo '```' >> semantic_analysis.md
          ms_print semantic_massif.out 2>/dev/null | head -100 >> semantic_analysis.md || true
          echo '```' >> semantic_analysis.md
          echo "" >> semantic_analysis.md

          echo "## Call Graph (Top Functions)" >> semantic_analysis.md
          echo '```' >> semantic_analysis.md
          callgrind_annotate semantic_callgrind.out 2>/dev/null | head -100 >> semantic_analysis.md || true
          echo '```' >> semantic_analysis.md

      - name: Upload Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: semantic-valgrind-results
          path: |
            semantic_cachegrind.out
            semantic_massif.out
            semantic_callgrind.out
            semantic_analysis.md

  valgrind-codegen:
    name: Valgrind - Codegen
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-rust@1ff88fdaffd6ae35c0fb32ccc159340b37d0beac # v1.0.7
        with:
          cache-key: valgrind-codegen
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Install Valgrind
        run: |
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          sudo apt-get update && sudo apt-get install -y valgrind

      - name: Build Codegen Example
        run: cargo build --release -p oxc_codegen --example codegen

      - name: Download TypeScript checker.ts
        run: |
          mkdir -p test_inputs
          curl -fsSL https://raw.githubusercontent.com/microsoft/TypeScript/main/src/compiler/checker.ts \
            -o test_inputs/checker.ts
          echo "Downloaded checker.ts ($(wc -l < test_inputs/checker.ts) lines)"

      - name: Run Cachegrind
        run: |
          valgrind --tool=cachegrind \
            --cachegrind-out-file=codegen_cachegrind.out \
            --branch-sim=yes \
            --cache-sim=yes \
            target/release/examples/codegen test_inputs/checker.ts

      - name: Run Massif
        run: |
          valgrind --tool=massif \
            --massif-out-file=codegen_massif.out \
            --time-unit=B \
            target/release/examples/codegen test_inputs/checker.ts

      - name: Run Callgrind
        run: |
          valgrind --tool=callgrind \
            --callgrind-out-file=codegen_callgrind.out \
            --dump-instr=yes \
            --collect-jumps=yes \
            target/release/examples/codegen test_inputs/checker.ts

      - name: Analyze Results
        run: |
          echo "# Codegen Performance Analysis" > codegen_analysis.md
          echo "" >> codegen_analysis.md
          echo "Test File: TypeScript checker.ts (~50k LOC)" >> codegen_analysis.md
          echo "" >> codegen_analysis.md

          # Extract key metrics
          echo "## Key Metrics Summary" >> codegen_analysis.md
          echo '```' >> codegen_analysis.md

          # Total instructions
          TOTAL_IR=$(cg_annotate codegen_cachegrind.out | grep "PROGRAM TOTALS" | awk '{print $1}')
          echo "Total Instructions: $TOTAL_IR" >> codegen_analysis.md

          # Cache statistics if available
          cg_annotate codegen_cachegrind.out | grep -A 1 "PROGRAM TOTALS" | tail -1 >> codegen_analysis.md || true

          # Peak memory
          PEAK_MB=$(ms_print codegen_massif.out | grep "peak" | head -1 | awk '{print $NF}')
          echo "Peak Heap Memory: $PEAK_MB" >> codegen_analysis.md

          # Top 3 hot functions
          echo "" >> codegen_analysis.md
          echo "Top 3 Hot Functions:" >> codegen_analysis.md
          callgrind_annotate codegen_callgrind.out | grep "crates/oxc" | head -3 >> codegen_analysis.md

          echo '```' >> codegen_analysis.md
          echo "" >> codegen_analysis.md

          echo "## Cache Performance (Cachegrind)" >> codegen_analysis.md
          echo '```' >> codegen_analysis.md
          cg_annotate codegen_cachegrind.out 2>/dev/null | head -100 >> codegen_analysis.md || true
          echo '```' >> codegen_analysis.md
          echo "" >> codegen_analysis.md

          echo "## Heap Profiling (Massif)" >> codegen_analysis.md
          echo '```' >> codegen_analysis.md
          ms_print codegen_massif.out 2>/dev/null | head -100 >> codegen_analysis.md || true
          echo '```' >> codegen_analysis.md
          echo "" >> codegen_analysis.md

          echo "## Call Graph (Top Functions)" >> codegen_analysis.md
          echo '```' >> codegen_analysis.md
          callgrind_annotate codegen_callgrind.out 2>/dev/null | head -100 >> codegen_analysis.md || true
          echo '```' >> codegen_analysis.md

      - name: Upload Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: codegen-valgrind-results
          path: |
            codegen_cachegrind.out
            codegen_massif.out
            codegen_callgrind.out
            codegen_analysis.md

  summary:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs: [valgrind-parser, valgrind-semantic, valgrind-codegen]
    if: always()
    steps:
      - name: Download All Results
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: valgrind-results

      - name: Display Analysis Results
        run: |
          echo "============================================"
          echo "PARSER ANALYSIS"
          echo "============================================"
          cat valgrind-results/parser-valgrind-results/parser_analysis.md || echo "Parser analysis not found"
          echo ""
          echo ""
          echo "============================================"
          echo "SEMANTIC ANALYSIS"
          echo "============================================"
          cat valgrind-results/semantic-valgrind-results/semantic_analysis.md || echo "Semantic analysis not found"
          echo ""
          echo ""
          echo "============================================"
          echo "CODEGEN ANALYSIS"
          echo "============================================"
          cat valgrind-results/codegen-valgrind-results/codegen_analysis.md || echo "Codegen analysis not found"
          echo ""

      - name: Generate Summary
        run: |
          echo "# Valgrind Performance Analysis Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Performance profiling completed for the core compilation pipeline." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add full analysis reports
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f valgrind-results/parser-valgrind-results/parser_analysis.md ]; then
            cat valgrind-results/parser-valgrind-results/parser_analysis.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f valgrind-results/semantic-valgrind-results/semantic_analysis.md ]; then
            cat valgrind-results/semantic-valgrind-results/semantic_analysis.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f valgrind-results/codegen-valgrind-results/codegen_analysis.md ]; then
            cat valgrind-results/codegen-valgrind-results/codegen_analysis.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## Test File" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**TypeScript checker.ts** (~50,000 lines)" >> $GITHUB_STEP_SUMMARY
          echo "- Real-world TypeScript file from microsoft/TypeScript" >> $GITHUB_STEP_SUMMARY
          echo "- Contains complex type checking logic" >> $GITHUB_STEP_SUMMARY
          echo "- Represents typical large-scale TypeScript codebase patterns" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Stages Analyzed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Parser** (\`oxc_parser\`) - Lexical + Syntactic analysis" >> $GITHUB_STEP_SUMMARY
          echo "2. **Semantic** (\`oxc_semantic\`) - Scope/symbol building, binding resolution" >> $GITHUB_STEP_SUMMARY
          echo "3. **Codegen** (\`oxc_codegen\`) - AST → JavaScript code generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Profiling Tools Used" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Cachegrind**: CPU cache behavior, branch predictions, instruction counts" >> $GITHUB_STEP_SUMMARY
          echo "- **Massif**: Heap memory allocation patterns over time" >> $GITHUB_STEP_SUMMARY
          echo "- **Callgrind**: Function call graphs, hot path identification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Key Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Efficiency" >> $GITHUB_STEP_SUMMARY
          echo "- **L1 Data Cache Misses** - Indicates data structure layout issues" >> $GITHUB_STEP_SUMMARY
          echo "- **L2/LL Cache Misses** - Shows memory access patterns" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch Mispredictions** - Control flow optimization opportunities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Memory Allocation" >> $GITHUB_STEP_SUMMARY
          echo "- **Peak Heap Usage** - Maximum memory consumption" >> $GITHUB_STEP_SUMMARY
          echo "- **Allocation Hot Spots** - Functions causing most allocations" >> $GITHUB_STEP_SUMMARY
          echo "- **Arena Usage Patterns** - Bump allocator efficiency" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Execution Profile" >> $GITHUB_STEP_SUMMARY
          echo "- **Hot Functions** - Most CPU-intensive functions" >> $GITHUB_STEP_SUMMARY
          echo "- **Call Frequency** - Functions called most often" >> $GITHUB_STEP_SUMMARY
          echo "- **Instruction Counts** - Total computational cost per function" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Download Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Detailed profiling data for each stage:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 \`parser-valgrind-results\` - Parser performance data" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 \`semantic-valgrind-results\` - Semantic analysis data" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 \`codegen-valgrind-results\` - Code generation data" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Each artifact contains:" >> $GITHUB_STEP_SUMMARY
          echo "- \`*_cachegrind.out\` - Cache profiling data" >> $GITHUB_STEP_SUMMARY
          echo "- \`*_massif.out\` - Heap profiling data" >> $GITHUB_STEP_SUMMARY
          echo "- \`*_callgrind.out\` - Call graph data" >> $GITHUB_STEP_SUMMARY
          echo "- \`*_analysis.md\` - Pre-generated summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Analysis Guide" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts and extract" >> $GITHUB_STEP_SUMMARY
          echo "2. Start with \`*_analysis.md\` for high-level overview" >> $GITHUB_STEP_SUMMARY
          echo "3. Look for high cache miss rates (>5% L1, >1% LL)" >> $GITHUB_STEP_SUMMARY
          echo "4. Identify allocation hot spots in heap profiles" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deep Dive (Local Analysis)" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Source-level cache analysis" >> $GITHUB_STEP_SUMMARY
          echo "cg_annotate --auto=yes parser_cachegrind.out" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Heap allocation graph" >> $GITHUB_STEP_SUMMARY
          echo "ms_print parser_massif.out" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# GUI visualization (requires kcachegrind)" >> $GITHUB_STEP_SUMMARY
          echo "kcachegrind parser_cachegrind.out" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Optimization Priorities" >> $GITHUB_STEP_SUMMARY
          echo "1. **Parser** - Affects all files, highest impact" >> $GITHUB_STEP_SUMMARY
          echo "2. **Semantic** - Complex traversals, scope building" >> $GITHUB_STEP_SUMMARY
          echo "3. **Codegen** - String building, output generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See [\`.github/workflows/VALGRIND.md\`](VALGRIND.md) for detailed documentation." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all generated files
          echo "## Generated Files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find valgrind-results -type f 2>/dev/null | sort >> $GITHUB_STEP_SUMMARY || echo "No artifacts found"
          echo '```' >> $GITHUB_STEP_SUMMARY
