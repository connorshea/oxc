// Auto-generated code, DO NOT EDIT DIRECTLY!
// To edit this generated file you have to edit `tasks/ast_tools/src/generators/raw_transfer_lazy.rs`.

'use strict';

// Mapping from node type name to node type ID.
// In alphabetical order, to enable binary search.
const NODE_TYPE_IDS_MAP = [
  { name: 'AccessorProperty', id: 101 },
  { name: 'ArrayAssignmentTarget', id: 58 },
  { name: 'ArrayExpression', id: 39 },
  { name: 'ArrayPattern', id: 90 },
  { name: 'ArrowFunctionExpression', id: 94 },
  { name: 'AssignmentExpression', id: 57 },
  { name: 'AssignmentPattern', id: 87 },
  { name: 'AssignmentTargetPropertyIdentifier', id: 61 },
  { name: 'AssignmentTargetPropertyProperty', id: 62 },
  { name: 'AssignmentTargetWithDefault', id: 60 },
  { name: 'AwaitExpression', id: 64 },
  { name: 'BigIntLiteral', id: 16 },
  { name: 'BinaryExpression', id: 53 },
  { name: 'BindingIdentifier', id: 2 },
  { name: 'BindingProperty', id: 89 },
  { name: 'BlockStatement', id: 67 },
  { name: 'BooleanLiteral', id: 12 },
  { name: 'BreakStatement', id: 78 },
  { name: 'CallExpression', id: 47 },
  { name: 'CatchClause', id: 86 },
  { name: 'ChainExpression', id: 65 },
  { name: 'Class', id: 96 },
  { name: 'ClassBody', id: 97 },
  { name: 'ComputedMemberExpression', id: 44 },
  { name: 'ConditionalExpression', id: 56 },
  { name: 'ContinueStatement', id: 77 },
  { name: 'DebuggerStatement', id: 10 },
  { name: 'Decorator', id: 172 },
  { name: 'DoWhileStatement', id: 72 },
  { name: 'Elision', id: 5 },
  { name: 'EmptyStatement', id: 9 },
  { name: 'ExportAllDeclaration', id: 110 },
  { name: 'ExportDefaultDeclaration', id: 109 },
  { name: 'ExportNamedDeclaration', id: 108 },
  { name: 'ExportSpecifier', id: 111 },
  { name: 'ExpressionStatement', id: 70 },
  { name: 'ForInStatement', id: 75 },
  { name: 'ForOfStatement', id: 76 },
  { name: 'ForStatement', id: 74 },
  { name: 'FormalParameters', id: 92 },
  { name: 'Function', id: 91 },
  { name: 'FunctionBody', id: 93 },
  { name: 'Hashbang', id: 8 },
  { name: 'IdentifierName', id: 0 },
  { name: 'IdentifierReference', id: 1 },
  { name: 'IfStatement', id: 71 },
  { name: 'ImportAttribute', id: 107 },
  { name: 'ImportDeclaration', id: 103 },
  { name: 'ImportDefaultSpecifier', id: 105 },
  { name: 'ImportExpression', id: 102 },
  { name: 'ImportNamespaceSpecifier', id: 106 },
  { name: 'ImportSpecifier', id: 104 },
  { name: 'JSDocNonNullableType', id: 177 },
  { name: 'JSDocNullableType', id: 176 },
  { name: 'JSDocUnknownType', id: 37 },
  { name: 'JSXAttribute', id: 120 },
  { name: 'JSXClosingElement', id: 115 },
  { name: 'JSXClosingFragment', id: 19 },
  { name: 'JSXElement', id: 113 },
  { name: 'JSXEmptyExpression', id: 20 },
  { name: 'JSXExpressionContainer', id: 119 },
  { name: 'JSXFragment', id: 116 },
  { name: 'JSXIdentifier', id: 21 },
  { name: 'JSXMemberExpression', id: 118 },
  { name: 'JSXNamespacedName', id: 117 },
  { name: 'JSXOpeningElement', id: 114 },
  { name: 'JSXOpeningFragment', id: 18 },
  { name: 'JSXSpreadAttribute', id: 121 },
  { name: 'JSXSpreadChild', id: 122 },
  { name: 'JSXText', id: 22 },
  { name: 'LabelIdentifier', id: 3 },
  { name: 'LabeledStatement', id: 83 },
  { name: 'LogicalExpression', id: 55 },
  { name: 'MetaProperty', id: 49 },
  { name: 'MethodDefinition', id: 98 },
  { name: 'NewExpression', id: 48 },
  { name: 'NullLiteral', id: 13 },
  { name: 'NumericLiteral', id: 14 },
  { name: 'ObjectAssignmentTarget', id: 59 },
  { name: 'ObjectExpression', id: 40 },
  { name: 'ObjectPattern', id: 88 },
  { name: 'ObjectProperty', id: 41 },
  { name: 'ParenthesizedExpression', id: 66 },
  { name: 'PrivateFieldExpression', id: 46 },
  { name: 'PrivateIdentifier', id: 11 },
  { name: 'PrivateInExpression', id: 54 },
  { name: 'Program', id: 38 },
  { name: 'PropertyDefinition', id: 99 },
  { name: 'RegExpLiteral', id: 17 },
  { name: 'ReturnStatement', id: 79 },
  { name: 'SequenceExpression', id: 63 },
  { name: 'SpreadElement', id: 50 },
  { name: 'StaticBlock', id: 100 },
  { name: 'StaticMemberExpression', id: 45 },
  { name: 'StringLiteral', id: 15 },
  { name: 'Super', id: 7 },
  { name: 'SwitchCase', id: 82 },
  { name: 'SwitchStatement', id: 81 },
  { name: 'TSAnyKeyword', id: 23 },
  { name: 'TSArrayType', id: 133 },
  { name: 'TSAsExpression', id: 166 },
  { name: 'TSBigIntKeyword', id: 36 },
  { name: 'TSBooleanKeyword', id: 25 },
  { name: 'TSCallSignatureDeclaration', id: 150 },
  { name: 'TSClassImplements', id: 145 },
  { name: 'TSConditionalType', id: 128 },
  { name: 'TSConstructSignatureDeclaration', id: 152 },
  { name: 'TSConstructorType', id: 163 },
  { name: 'TSEnumBody', id: 124 },
  { name: 'TSEnumDeclaration', id: 123 },
  { name: 'TSEnumMember', id: 125 },
  { name: 'TSExportAssignment', id: 173 },
  { name: 'TSExternalModuleReference', id: 170 },
  { name: 'TSFunctionType', id: 162 },
  { name: 'TSImportEqualsDeclaration', id: 169 },
  { name: 'TSImportType', id: 161 },
  { name: 'TSIndexSignature', id: 149 },
  { name: 'TSIndexSignatureName', id: 153 },
  { name: 'TSIndexedAccessType', id: 134 },
  { name: 'TSInferType', id: 159 },
  { name: 'TSInstantiationExpression', id: 175 },
  { name: 'TSInterfaceBody', id: 147 },
  { name: 'TSInterfaceDeclaration', id: 146 },
  { name: 'TSInterfaceHeritage', id: 154 },
  { name: 'TSIntersectionType', id: 130 },
  { name: 'TSIntrinsicKeyword', id: 28 },
  { name: 'TSLiteralType', id: 127 },
  { name: 'TSMappedType', id: 164 },
  { name: 'TSMethodSignature', id: 151 },
  { name: 'TSModuleBlock', id: 157 },
  { name: 'TSModuleDeclaration', id: 156 },
  { name: 'TSNamedTupleMember', id: 136 },
  { name: 'TSNamespaceExportDeclaration', id: 174 },
  { name: 'TSNeverKeyword', id: 27 },
  { name: 'TSNonNullExpression', id: 171 },
  { name: 'TSNullKeyword', id: 30 },
  { name: 'TSNumberKeyword', id: 26 },
  { name: 'TSObjectKeyword', id: 35 },
  { name: 'TSOptionalType', id: 137 },
  { name: 'TSParenthesizedType', id: 131 },
  { name: 'TSPropertySignature', id: 148 },
  { name: 'TSQualifiedName', id: 140 },
  { name: 'TSRestType', id: 138 },
  { name: 'TSSatisfiesExpression', id: 167 },
  { name: 'TSStringKeyword', id: 24 },
  { name: 'TSSymbolKeyword', id: 33 },
  { name: 'TSTemplateLiteralType', id: 165 },
  { name: 'TSThisType', id: 34 },
  { name: 'TSTupleType', id: 135 },
  { name: 'TSTypeAliasDeclaration', id: 144 },
  { name: 'TSTypeAnnotation', id: 126 },
  { name: 'TSTypeAssertion', id: 168 },
  { name: 'TSTypeLiteral', id: 158 },
  { name: 'TSTypeOperator', id: 132 },
  { name: 'TSTypeParameter', id: 142 },
  { name: 'TSTypeParameterDeclaration', id: 143 },
  { name: 'TSTypeParameterInstantiation', id: 141 },
  { name: 'TSTypePredicate', id: 155 },
  { name: 'TSTypeQuery', id: 160 },
  { name: 'TSTypeReference', id: 139 },
  { name: 'TSUndefinedKeyword', id: 31 },
  { name: 'TSUnionType', id: 129 },
  { name: 'TSUnknownKeyword', id: 29 },
  { name: 'TSVoidKeyword', id: 32 },
  { name: 'TaggedTemplateExpression', id: 43 },
  { name: 'TemplateElement', id: 6 },
  { name: 'TemplateLiteral', id: 42 },
  { name: 'ThisExpression', id: 4 },
  { name: 'ThrowStatement', id: 84 },
  { name: 'TryStatement', id: 85 },
  { name: 'UnaryExpression', id: 52 },
  { name: 'UpdateExpression', id: 51 },
  { name: 'V8IntrinsicExpression', id: 112 },
  { name: 'VariableDeclaration', id: 68 },
  { name: 'VariableDeclarator', id: 69 },
  { name: 'WhileStatement', id: 73 },
  { name: 'WithStatement', id: 80 },
  { name: 'YieldExpression', id: 95 },
];

module.exports = {
  NODE_TYPE_IDS_MAP,
  NODE_TYPES_COUNT: 178,
  LEAF_NODE_TYPES_COUNT: 38,
};
